Start : 2022/04/20 WED
< Project Goal >
1. C# naming rule에 맞춰 스크립트를 작성하여 누구나 보기 쉬운 코드를 작성할 것
  참고 링크: https://docs.microsoft.com/ko-kr/dotnet/csharp/fundamentals/coding-style/coding-conventions
2. 클래스를 꼼꼼히 설계하여 클래스끼리 최대한 약한 결합을 가지고, 코드의 중복을 최소화 할 것.

Date : 2022/04/20 WED
< List >
☑ Stage Tilemap 필드 구현.
☑ Enemy 오브젝트 구현.
☑ Enemy Spawner 오브젝트 구현.

Date : 2022/04/21 THU
< List >
☑ Object Pooling 기법 구현.
	☑ ObjectPool 오브젝트 및 스크립트 구현.

Date : 2022/04/24 SUN
< List >
☑ Photon package Import.
☑ Tower 오브젝트의 공격을 담당하는 TowerWeapon 컴포넌트 구현.
☑ TowerTile 오브젝트 위에 타워가 건설되있는지 여부를 확인하기 위한 Tile 컴포넌트 구현.
☑ 플레이어의 화면 클릭(터치)를 인식하고 그에 맞는 작업을 수행하는 ObjectDetector 컴포넌트 구현.
☑ TowerData scriptable의 데이터필드 변경.
    -> 타워의 레벨에 따른 능력치 변화를 각각 설정할 수 있도록 Weapon 구조체를 선언하고 Weapon array에 레벨에 따른 능력치를 설정하였음.
☑ Tile 오브젝트 위에 타워를 건설하기 위한 TowerBuilder 컴포넌트 구현.
3
Date : 2022/04/27 TUE
< List >
☑ 코드 네이밍 규칙에 맞게 전체적으로 변경.
☑ Abstract Class 인 TowerWeapon Class 구현. (앞으로 계속 업데이트 해야함)
☑ TowerWeapon class를 상속받는 9가지 타입의 타워 구현.

Date : 2022/04/28 WED
< List >
☑ 카드 뽑기를 위한 CardDrawer 컴포넌트 구현.
☑ 카드와 관련된 UI들을 제어하기 위한 CardUIController 컴포넌트 구현.
☑ 인게임 내 전체 UI의 상태 변경을 담당하는 UIManager 구현.
☑ TowerBuilder 컴포넌트에서 CardDrawer에서 뽑은 족보에 맞는 타워를 건설하도록 변경

Date : 2022/04/29 FRI
< List >
☑ Enemy 이미지 변경 및 체력바 변경.
☑ 이미지를 변경하면서 오브젝트가 바라보는 방향이 중요해짐. 진행 방향에 따른 방향 전환 구현.
☑ 우주 배경 이미지 추가. 백그라운드 스크롤링을 통해 천천히 왼쪽으로 움직이도록 구현.
☑ 타워의 Enemy 탐색 기능 구현.
☑ 타일맵 디자인 개선.

Date : 2022/04/30 SAT
< List >
☑ 타워를 표현하는 구조 재설계
    -> 추상클래스인 TowerWeapon의 종류마다 프리팹을 만들어 관리할 때는 한 스크립트에서 하는 기능이 너무 많고,
    TowerWeapon과 관련 없는 Tower만의 기능을 추가할 때 다수의 프리팹에 컴포넌트를 연결해줘야 했던 문제점을
   해결하기 위해 재설계를 진행.
☑ Tower 오브젝트를 새로 만들고, Tower에서 TowerWeapon을 사용하는 형태로 구현.
☑ 기존에 TowerWeapon에서 하던 기능들을 세분화하여 컴포넌트로 만들었음.
☑ 상대와 경쟁하는 대전모드를 만들기 위해 고민중. 동시에 라운드를 진행할 수 있게 하고싶은데, 현재의 맵 디자인으로는 
     제한 사항이 많을듯하여 다른 디자인을 구상중.

Date : 2022/05/01 SUN
< List>
☑ 스테이지 디자인 변경.
☑ 카드 뽑는 방식 5포커에서 7포커로 변경.
☑ 대전모드 임시 UI 구현.
☑ 타일 위에 타워를 짓던 방식에서 맵 중앙에서 타워가 생성되도록 변경.

Date : 2022/05/02 MON
< List >
☑ 포커 족보를 확인하는 로직을 비트마스크 기법으로 변경
    -> 기존 방식에서는 카드의 정보를 무늬, 숫자로 나눠서 저장하기 위한 추가적인 배열 선언이 필요했기 때문에
    비트마스크 기법을 이용하면 추가적인 배열 선언을 하지 않아도 되서 메모리 공간을 절약할 수 있을 것이라 판단했기 때문.
    또한 배열의 원소에 접근하여 값을 바꾸거나 비교하는 연산보다 비트연산이 훨씬 빠를 것이라고 생각했는데, 적용 결과 실제로 
    함수의 실행 속도가 눈에 띄게 개선되었음.
☑ 드래그를 통해 타워를 움직이는 기능 구현.
☑ 타워를 드래그 하는 중일 때, 타워의 사거리를 표시하는 기능 구현.

Date : 2022/05/03 THU
< List >
☑ 타워가 공격할 때 생성되는 발사체의 클래스 구조 설계, Enemy 클래스 구조 설계 진행중.

Date : 2022/05/04 WED
< List >
☑ 타워 오브젝트의 구조 다시 재설계. ㅠㅠ
    -> why? 타워의 공격을 구현할 방법을 생각하던중 유니티 최적화와 관련하여 Monobehaviour를 상속받는 클래스가 적을수록 좋다는
    정보를 얻음. 기존 타워 오브젝트에서 TowerLevel, TowerColor, TargetDetector 컴포넌트는 단독으로 동작하는 것이 아닌 타워의 
    제어를 통해 기능을 수행하고 있었는데 이 컴포넌트들은 Monobehaviour 을 상속받지 않고 기능을 수행하도록 구현하는 것이 더
    좋을 것이라 생각하였음.

Date : 2022/05/07 SAT
☑ 타워 오브젝트 재설계 완료.
☑ 타워의 발사체 발사 및 Enemy와 충돌 시 데미지를 입히고 Enemy의 체력이 0 이하가 되면 스크린에서 사라지는 로직 구현.

Date : 2022/05/08 SUN
☑ 생성 됐다가 죽고 오브젝트풀에 들어간 Enemy가 다시 생성될 때 이상하게 이동하는 버그, 타워가 발사한 총알이 갑자기 오브젝트풀로 돌아가는 버그 수정.
    -> 오브젝트풀에서 꺼낸 오브젝트를 다 사용하고나서 다시 오브젝트풀에 반납하기 위해 Action 델리게이트에 람다식으로 ReturnObject() 메서드를 구독 시켜놓았는데,
    구독 시킨 메소드를 구독 취소하는 과정에서 버그가 발생했던 걸로 파악됨. Enemy와 Projectile 오브젝트가 각각 EnemySpawner와 ProjectileSpawner를 참조하도록 
    하고, 직접 ReturnObject() 메서드를 호출하는 방식으로 변경하여 이를 해결함. 델리게이트를 잘 사용하기 위한 공부가 더 필요할 듯.
☑ Enemy의 상태이상(슬로우, 스턴) 기능 구현.
    -> 슬로우는 중첩되도록 구현하였고, 감소된 이동 속도를 기준으로 슬로우를 적용하여 여러번 중첩되어도 이동 속도가 0이 되지 않도록 하였음.
    -> 스턴은 가장 긴 스턴 시간을 기준으로 동작하도록 구현하였음. 메소드가 호출될 때마다 StunCount 변수에 스턴 횟수를 누적 시키고, 
    스턴 시간이 지나면 누적시켰던 스턴 횟수를 다시 감소 시킨 다음, StunCount 가 0일 때(누적된 스턴 시간이 없을 때)만 이동 속도를 원래대로 되돌리도록 
    구현하였음.
    (예를 들어 5초 스턴과 3초 스턴 공격을 받는다고 했을 때 stunCount 값은 2가 되고 3초 스턴이 풀리면 1로 감소, 5초 스턴이 풀리면서 0이 되어 이동 속도가 
    원래대로 돌아옴.)

Date : 2022/05/09 MON
☑ Enemy 클래스 세분화 -> Enemy(FieldEnemy(RoundEnemy,FieldBossEnemy(RoundBossEnemy, MissionBossEnemy), PlanetBossEnemy)
☑ RoundBossEnemy, MissionBossEnemy, PlanetBossEnemy 구현.
☑ GameManager에 남은 라이프, 현재 골드, 미네랄, 카드 변경권 횟수 추가.
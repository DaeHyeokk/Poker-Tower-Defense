Start : 2022/04/20 WED
< Project Goal >
1. C# naming rule에 맞춰 스크립트를 작성하여 누구나 보기 쉬운 코드를 작성할 것!
  참고 링크: https://docs.microsoft.com/ko-kr/dotnet/csharp/fundamentals/coding-style/coding-conventions

Date : 2022/04/20 WED
< List >
☑ Stage Tilemap 필드 구현.
☑ Enemy 오브젝트 구현.
☑ Enemy Spawner 오브젝트 구현.

Date : 2022/04/21 THU
< List >
☑ Object Pooling 기법 구현.
	☑ ObjectPool 오브젝트 및 스크립트 구현.

Date : 2022/04/24 SUN
< List >
☑ Photon package Import.
☑ Tower 오브젝트의 공격을 담당하는 TowerWeapon 컴포넌트 구현.
☑ TowerTile 오브젝트 위에 타워가 건설되있는지 여부를 확인하기 위한 Tile 컴포넌트 구현.
☑ 플레이어의 화면 클릭(터치)를 인식하고 그에 맞는 작업을 수행하는 ObjectDetector 컴포넌트 구현.
☑ TowerData scriptable의 데이터필드 변경.
  -> 타워의 레벨에 따른 능력치 변화를 각각 설정할 수 있도록 Weapon 구조체를 선언하고 Weapon array에 레벨에 따른 능력치를 설정하였음.
☑ Tile 오브젝트 위에 타워를 건설하기 위한 TowerBuilder 컴포넌트 구현.

Date : 2022/04/27 TUE
< List >
☑ 코드 네이밍 규칙에 맞게 전체적으로 변경.
☑ Abstract Class 인 TowerWeapon Class 구현. (앞으로 계속 업데이트 해야함)
☑ TowerWeapon class를 상속받는 9가지 타입의 타워 구현.

Date : 2022/04/28 WED
< List >
☑ 카드 뽑기를 위한 CardDrawer 컴포넌트 구현.
☑ 카드와 관련된 UI들을 제어하기 위한 CardUIController 컴포넌트 구현.
☑ 인게임 내 전체 UI의 상태 변경을 담당하는 UIManager 구현.
☑ TowerBuilder 컴포넌트에서 CardDrawer에서 뽑은 족보에 맞는 타워를 건설하도록 변경